"""
Response models for the TransferAI system.

This module defines data models for responses returned by the system.
These models provide structure and validation for API responses.
"""

from enum import Enum
from typing import Optional, Dict, List, Any, Union
from pydantic import BaseModel, Field


class ResponseType(str, Enum):
    """Types of responses that can be generated by the system."""
    COURSE_VALIDATION = "course_validation"
    COURSE_EQUIVALENCE = "course_equivalence"
    GROUP_REQUIREMENT = "group_requirement"
    HONORS_INFO = "honors_info"
    ERROR = "error"
    UNKNOWN = "unknown"


class ValidationStatus(str, Enum):
    """Status of a validation check."""
    SATISFIED = "satisfied"
    PARTIALLY_SATISFIED = "partially_satisfied"
    NOT_SATISFIED = "not_satisfied"
    UNKNOWN = "unknown"


class CourseValidationDetails(BaseModel):
    """Details for a course validation response."""
    is_satisfied: bool = Field(..., description="Whether the requirement is satisfied")
    satisfied_by: List[str] = Field(default_factory=list, description="Courses that satisfy the requirement")
    missing_courses: List[str] = Field(default_factory=list, description="Courses still needed to satisfy the requirement")
    explanation: str = Field(..., description="Explanation of the validation result")


class CourseEquivalenceDetails(BaseModel):
    """Details for a course equivalence response."""
    ccc_course: str = Field(..., description="Community college course code")
    uc_courses: List[str] = Field(default_factory=list, description="Equivalent UC courses")
    direct_matches: List[str] = Field(default_factory=list, description="UC courses directly satisfied")
    combo_matches: List[str] = Field(default_factory=list, description="UC courses satisfied as part of a combination")
    honors_required: bool = Field(False, description="Whether honors is required")
    explanation: str = Field(..., description="Explanation of the equivalence")


class GroupRequirementDetails(BaseModel):
    """Details for a group requirement response."""
    group_id: str = Field(..., description="ID of the requirement group")
    group_title: str = Field(..., description="Title of the requirement group")
    logic_type: str = Field(..., description="Type of logic for the group")
    courses_required: Optional[int] = Field(None, description="Number of courses required (for select_n_courses)")
    sections: List[Dict[str, Any]] = Field(default_factory=list, description="Sections within the group")
    status: ValidationStatus = Field(ValidationStatus.UNKNOWN, description="Overall status of the group requirements")
    explanation: str = Field(..., description="Explanation of the group requirements")


class HonorsInfoDetails(BaseModel):
    """Details for an honors information response."""
    course_code: str = Field(..., description="Course code")
    honors_required: bool = Field(False, description="Whether honors is required")
    honors_courses: List[str] = Field(default_factory=list, description="Available honors courses")
    non_honors_courses: List[str] = Field(default_factory=list, description="Available non-honors courses")
    explanation: str = Field(..., description="Explanation of honors requirements")


class ErrorDetails(BaseModel):
    """Details for an error response."""
    error_code: str = Field(..., description="Error code")
    error_message: str = Field(..., description="Error message")
    suggestion: Optional[str] = Field(None, description="Suggestion for resolving the error")


class TransferAIResponse(BaseModel):
    """
    Standard response model for all TransferAI responses.
    
    All responses from the system should use this model to ensure
    consistent structure and enable proper client handling.
    """
    response_type: ResponseType = Field(..., description="Type of response")
    query: str = Field(..., description="Original query text")
    summary: str = Field(..., description="Summary of the response")
    details: Union[
        CourseValidationDetails, 
        CourseEquivalenceDetails,
        GroupRequirementDetails,
        HonorsInfoDetails,
        ErrorDetails,
        Dict[str, Any]
    ] = Field(..., description="Response details")
    
    @classmethod
    def create_error_response(cls, query: str, error_code: str, error_message: str, suggestion: Optional[str] = None) -> "TransferAIResponse":
        """
        Create an error response.
        
        Args:
            query: Original query text
            error_code: Error code
            error_message: Error message
            suggestion: Optional suggestion for resolving the error
            
        Returns:
            TransferAIResponse with error details
        """
        return cls(
            response_type=ResponseType.ERROR,
            query=query,
            summary=f"Error: {error_message}",
            details=ErrorDetails(
                error_code=error_code,
                error_message=error_message,
                suggestion=suggestion
            )
        )
